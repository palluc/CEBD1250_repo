Course: CEBD1250 Big Data Storage
Class #3 Exercises
---------------------------------

/* #1. Write a SQL query to get the third highest salary of an employee from employee_table  */

select * 
from salaries
where to_date = '9999-01-01'
order by salary desc limit 20;

/* Get the third highest salary */
select emp_no, salary, salary_rank
from
  (select emp_no, salary,
   @salary_rank := IF(@current_empno = emp_no, @cur_rank, @inc_rank) as salary_rank,
   @inc_rank := @inc_rank + 1, 
   @current_empno := emp_no
   from salaries,
   (SELECT @cur_rank :=0, @current_empno := NULL, @inc_rank := 1) r 
    where to_date = '9999-01-01'
    order by salary desc) rank
where salary_rank = 3
order by emp_no limit 20;


/* #2. Write a SQL query to find the names of employees that begin with ‘A’  */

#Write a SQL query to find the names of employees that begin with ‘A’
select * from employees where upper(substr(last_name,1,1)) = 'A' 
order by last_name;


/* #3. What is the difference between ‘HAVING’ CLAUSE and a ‘WHERE’ CLAUSE */

- Both are used in filtering queries, yet the timepoint of filtering is different.
- The having clause is an aggregate function and will filter the query on an SQL aggregate operation after all observation are selected (with the where clause expression).
- The where clause will filter an SQL query by testing every observation/record in a table for a condition and output to the select statement.



/* #4. List, and explain the elements of an Entities and Relationships model */

Entities and Relationships model:

a. Entity or Object:

Describes the table, the variables within the table and their properties/attributes. A table may have a primary key to identify unique records in the table.

b. Relationship

Relationships link one table to another by a key variable. The foreign key is what links a table to another table, yet a foreign key is not the primary key to that identifies unique records. 


c. Attribute:

Describes the property of the table variables; the name variable and its type (numeric, character, or date).
 

/* #5. What are the different categories of SQL statements, what does each group do */

a. Data definition language (DDL)

Creates the database structures by defining its objects, tables, contents of tables.

Example:create table, alter table, drop table, create {or replace} view, drop view.

b. Data manipulation language (DML)

Performs actions on a table by querying, select, update, insert, delete actions expressions. 

Example: insert, update, select, delete.

c. Data control language (DCL)

Performs control commands on a database schema by grant, revoke access to an object (such as a table), creates database definitions by create synonym command, create and set user access to database.
 
Example: grant, revoke, create synonym, alter password.

d. Transaction control language (TCL)

Manage database transactions that are performed by DML, DDL commands.

Example: commit, savepoint, rollback.


/* #6. List, and explain, the different types of joins */

a. inner join
    - a join between one or more tables and the output of the join contains the observations that is contained in all tables, based on a joined key.


b. left join
    - a join between one or more tables and the output of the join contains the observations that is contained in the left most table, even if the observations do not exist 
      in any other table

c. right join
    - a join between one or more tables and the output of the join contains the observations that is contained in the right most table 
       (this being identified by the position of the table after 'RIGHT JOIN' expression), even if the observations do not exist in any other table

d. self join

    - a join with the same table itself


e. outer join
    - a join between one or more tables and the output of the join contains the total observations of all other tables


/* #7. What is the difference between NULL value, Zero, and Blank space */

A field in a table that has:
- a NULL value: is one in which the field has not been initialized.
- a zero value: is an actual value of date type numeric
- a blank space: is a data value of type string and takes up storage space in a table (byte representation = 0010 0000).


/* #8. Write a SQL that returns the employee name and title for all employees with even number as actual salary (to_date is 9999-01-01) */

desc salaries;

select *, (salary % 2) odd_flag
from salaries as s
where to_date ='9999-01-01' and (salary % 2) = 0
order by emp_no
limit 50;


select * from employees as e
where exists
(
select emp_no,  (salary % 2) as odd_flag, salary
from salaries as s
where to_date ='9999-01-01' and (salary % 2) = 0
and s.emp_no = e.emp_no
) order by emp_no limit 50;


/* #9. What is wrong with the following query, re-write it making the needed corrections. 
 SELECT employee.emp_no, AVG(salaries.salary) 
 FROM employee INNER JOIN salaries AT employee.emp_no = salaries.emp_no 
 HAVING AVG(salaries.salary) > 10000 
 GROUP BY employee.emp_no */


i. name of 'employees' table is wrong
ii. syntax for join tables is wrong
iii. group by expression in wrong place
iv. correction: 

desc emp_1963_2;

SELECT e.emp_no, AVG(s.salary)
FROM employees  e INNER JOIN salaries s
ON e.emp_no = s.emp_no
GROUP BY e.emp_no
HAVING AVG(s.salary) > 10000

